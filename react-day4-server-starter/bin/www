#!/usr/bin/env node

const http = require('http');

let app = require('../app');



// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

const io = require('socket.io').listen(server)

io.of('/chat').clients((error, clients) => {
  if (error) throw error;
  console.log(clients);
}) 

io.on('connection', function(socket){
  console.log('a user connected');

  socket.join('room 237', () => {
    let rooms = Object.keys(socket.rooms);
    console.log(rooms); // [ <socket.id>, 'room 237' ]
    io.to('room 237').emit('a new user has joined the room'); // broadcast to everyone in the room
  });

  socket.on("newUser", user => {
    console.log(`${user} connected`);
    userList.push(user);
    socket.emit("list", userList);
    socket.broadcast.emit("list", userList);
  });

  socket.on("messageSent", (message) => {
    console.log(message);
    socket.emit("newMessage", message);
    socket.broadcast.emit("newMessage", message);
  });

});

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
